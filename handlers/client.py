import useful
from create_bot import bot, dp
from aiogram import types, Dispatcher
from datetime import datetime
import openai
import work_db
from keyboard import kb
from useful import days_to_seconds, chatGPT_response, create_mask
import time

from dotenvy import load_env, read_file
from os import environ
load_env(read_file('.env'))
openai.api_key = environ.get('OPENAI_API_KEY')
SHOP_API_TOKEN = environ.get('SHOP_API_TOKEN')


start_message = '–ü—Ä–∏–≤–µ—Ç! \n' \
           '–ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–ª–∏—Å–∞ –∏ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ –∏–º–µ—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ ChatGPT ‚ö°Ô∏è\n\n' \
           '- –∫—Ç–æ —Ç—ã, ChatGPT?\n\n' \
           '–Ø —è–≤–ª—è—é—Å—å —Å–∏—Å—Ç–µ–º–æ–π –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞, –∫–æ—Ç–æ—Ä–∞—è –±—ã–ª–∞ –æ–±—É—á–µ–Ω–∞ –Ω–∞ –æ–≥—Ä–æ–º–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –¥–∞–Ω–Ω—ã—Ö, –≤–∫–ª—é—á–∞—è –∫–æ–¥, –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –∏ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã. –Ø –∏—Å–ø–æ–ª—å–∑—É—é —ç—Ç–æ –æ–±—É—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–Ω–µ –∑–∞–¥–∞—é—Ç. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–¥–æ–º, —è –±—É–¥—É —Å—Ç–∞—Ä–∞—Ç—å—Å—è –ø–æ–º–æ—á—å –≤–∞–º –∫–∞–∫ –º–æ–∂–Ω–æ –ª—É—á—à–µ.\n\n' \
           '–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—à –±–æ—Ç: \n' \
           '1. –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ ChatGPT –≥—Ä–∞–∂–¥–∞–Ω–∞–º –°–ù–ì (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–∑ –°–ù–ì –Ω–∞ —Å–∞–π—Ç–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞)\n' \
           '2. –ß–µ—Ä–µ–∑ –±–æ—Ç –ø–æ–ª—É—á–∞–π—Ç–µ –æ—Ç–≤–µ—Ç—ã –¥–∞–∂–µ —Ç–æ–≥–¥–∞, –∫–æ–≥–¥–∞ –≤–µ–±-—Å–∞–π—Ç –∑–∞–∫—Ä—ã—Ç –∏–∑-–∑–∞ –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏ \n\n' \
           '–ü–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ @ochulaevskii'

pay_text = 'ü•∏  –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–æ–∏—Å–∫–æ–º –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è –∫—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É \n\n14 –¥–Ω–µ–π –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –≤—Å–µ–≥–æ –∑–∞ 99 —Ä—É–±–ª–µ–π. –†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∏–≤–∏—Ç –∏–ª–∏ –º—ã –≤–µ—Ä–Ω–µ–º –≤–∞–º –¥–µ–Ω—å–≥–∏! \n\n–ü–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º: @ochulaevskii'
question_text =f"<b>üîç –ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –≤–æ–ø—Ä–æ—Å!</b>\n\n–ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –≤–∫–ª—é—á–∏—Ç—å –≤ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫—É.\n–ß–µ–º –¥–µ—Ç–∞–ª—å–Ω–µ–π –≤–æ–ø—Ä–æ—Å, —Ç–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–µ–π –æ—Ç–≤–µ—Ç"




async def start(message: types.Message):
    await bot.delete_message(message.from_user.id, message.message_id)  # –£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç
    await bot.send_message(message.from_user.id,
                        start_message,
                        parse_mode='html',)

    await bot.send_message(message.from_user.id,
                           question_text,
                           parse_mode='html', )

    work_db.insert_new_user(message.from_user.first_name, message.from_user.last_name, message.from_user.username, message.from_user.id)  # –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —ã –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    work_db.insert_subscription(message.from_user.id, 0, True, 0)


async def pay(message: types.Message):  # –§—É–Ω–∫—Ü–∏—è –æ–ø–ª–∞—Ç—ã –ø–ª–∞—Ç–µ–∂–∞
    await bot.send_invoice(chat_id=message.from_user.id,
                           title='–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è',
                           description=pay_text,
                           payload='14_days',
                           currency='RUB',
                           prices=[{'label': ' –†—É–±', 'amount': 9900}],
                           photo_width=1250,
                           photo_height=725,
                           photo_url='https://avatars.mds.yandex.net/get-images-cbir/6930134/zCjOsx7CdGkw7Y9WL_Lzdw118/ocr',
                           provider_token=SHOP_API_TOKEN,
    )

@dp.pre_checkout_query_handler()
async def pre_checkout(pre_checkout_query: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


async def process_pay(message: types.Message):
    if message.successful_payment.invoice_payload == '14_days':
        time_sub = int(time.time()) + int(days_to_seconds(14))
        work_db.update_subscription(message.from_user.id, time_sub, 99)  # Update time sub after succes pay
        await bot.send_message(message.from_user.id,question_text,
                        parse_mode='html')



async def bot_answer_from_openai(message: types.Message):
    response = work_db.check_subscription(message.from_user.id)
    if response == 1:
        msg_stiker = await bot.send_sticker(message.chat.id,
                                     'CAACAgIAAxkBAAEGRIFjYDB2O_zAbzSB6kCUIrfPqdk8TgACIwADKA9qFCdRJeeMIKQGKgQ')
        await bot.send_message(chat_id=message.from_user.id,
                               text=chatGPT_response(message.text))
        await msg_stiker.delete()

    elif response == 0:
        msg_stiker = await bot.send_sticker(message.chat.id,
                                            'CAACAgIAAxkBAAEGRIFjYDB2O_zAbzSB6kCUIrfPqdk8TgACIwADKA9qFCdRJeeMIKQGKgQ')
        await bot.send_message(chat_id=message.from_user.id,
                               text=useful.create_mask(chatGPT_response(message.text)))
        await msg_stiker.delete()

    elif response == 3:
        await bot.send_message(message.from_user.id, 'ü•∏ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å!\n –ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–æ–∏—Å–∫–æ–º –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è',
                               parse_mode='html')
        await pay(message)

    elif response == 2:
        await start(message)





def register_handlers_client(dp : Dispatcher):
    dp.register_message_handler(start, commands=['start'])
    dp.register_message_handler(bot_answer_from_openai)
    dp.register_message_handler(pre_checkout)
    dp.register_message_handler(process_pay, content_types='SUCCESSFULL_PAYMENT')






