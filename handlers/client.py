from create_bot import bot, dp
from aiogram import types, Dispatcher
from datetime import datetime
import openai
import work_db

import time

from dotenvy import load_env, read_file
from os import environ
load_env(read_file('.env'))
openai.api_key = environ.get('OPENAI_API_KEY')
SHOP_API_TOKEN = environ.get('SHOP_API_TOKEN')


def days_to_seconds(days):
    return days*24*60*60

async def start(message: types.Message):
    await bot.send_message(message.from_user.id,
                        f"üîç –ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –≤–æ–ø—Ä–æ—Å!\n\n"
                        f"–ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –≤–∫–ª—é—á–∏—Ç—å –≤ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫—É.\n"
                        f"–ß–µ–º –¥–µ—Ç–∞–ª—å–Ω–µ–π –≤–æ–ø—Ä–æ—Å, —Ç–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–µ–π –æ—Ç–≤–µ—Ç")
    work_db.insert_new_user(message.from_user.id, message.from_user.username, datetime.now().strftime("%d-%m-%Y "), 0)  # –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —ã –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await bot.delete_message(message.from_user.id, message.message_id)  # –£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç



async def pay(message: types.Message):  # –§—É–Ω–∫—Ü–∏—è –æ–ø–ª–∞—Ç—ã –ø–ª–∞—Ç–µ–∂–∞
    await bot.send_invoice(chat_id=message.from_user.id,
                           title='–û–ø–ª–∞—Ç–∞',
                           description='14 –¥–Ω–µ–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞',
                           payload='14_days',
                           currency='RUB',
                           prices=[{'label': ' –†—É–±', 'amount': 9000}],
                           provider_token=SHOP_API_TOKEN, )

@dp.pre_checkout_query_handler()
async def pre_checkout(pre_checkout_query: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


async def process_pay(message: types.Message):
    if message.successful_payment.invoice_payload == '14_days':
        time_sub = int(time.time()) + int(days_to_seconds(14))
        sub_counter = work_db.get_sub(message.from_user.id)[0] + 1
        work_db.update_sub(message.from_user.id,time_sub, sub_counter)  # Update time sub after succes pay
        await bot.send_message(message.from_user.id,
                               f"üîç –ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –≤–æ–ø—Ä–æ—Å!\n\n"
                               f"–ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –≤–∫–ª—é—á–∏—Ç—å –≤ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫—É.\n"
                               f"–ß–µ–º –¥–µ—Ç–∞–ª—å–Ω–µ–π –≤–æ–ø—Ä–æ—Å, —Ç–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–µ–π –æ—Ç–≤–µ—Ç")



async def bot_answer_from_openai(message: types.Message):
    # –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
    if work_db.check_sub(message.from_user.id):
        msg_stiker = await bot.send_sticker(message.chat.id,
                                     'CAACAgIAAxkBAAEGRIFjYDB2O_zAbzSB6kCUIrfPqdk8TgACIwADKA9qFCdRJeeMIKQGKgQ')
        try:
            response = openai.Completion.create(
                model="text-davinci-003",
                prompt=message.text,
                temperature=0.5,
                max_tokens=1000,
                top_p=1.0,
                frequency_penalty=0.5,
                presence_penalty=0.0,
            )
            await msg_stiker.delete()
            await bot.send_message(chat_id=message.from_user.id,
                                   text=response['choices'][0]['text'])
        except:
            await msg_stiker.delete()
            await bot.send_message(chat_id=message.from_user.id,
                                   text="–°–µ—Ä–≤–µ—Ä chatGPT –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω")
    else:
        if work_db.get_sub(message.from_user.id)[1] > 0:
            await bot.send_message(chat_id=message.from_user.id,
                                   text='–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å')
        else:
            await bot.send_message(chat_id=message.from_user.id,
                                   text='ü•∏ –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è\n'
                                  '–ø–æ–∏—Å–∫–æ–º –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è\n'
                                  '–∫—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É\n'
                                  '14 –¥–Ω–µ–π –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –≤—Å–µ–≥–æ –∑–∞\n 99 —Ä—É–±–ª–µ–π.'
                                  '–†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∏–≤–∏—Ç –∏–ª–∏ –º—ã –≤–µ—Ä–Ω–µ–º –≤–∞–º –¥–µ–Ω—å–≥–∏!\n'
                                  '–ü–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º:\n @ochulaevskii') # –í—ã–≤–æ–¥–∏—Ç—Å—è –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        await pay(message)



def register_handlers_client(dp : Dispatcher):
    dp.register_message_handler(start, commands=['start'])
    dp.register_message_handler(bot_answer_from_openai)
    dp.register_message_handler(pre_checkout)
    dp.register_message_handler(process_pay, content_types='SUCCESSFULL_PAYMENT')






