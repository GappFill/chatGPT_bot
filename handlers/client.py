from create_bot import bot, dp
from aiogram import types, Dispatcher
from datetime import datetime
import openai
import work_db
from keyboard import kb
from useful import days_to_seconds, chatGPT_response
import time

from dotenvy import load_env, read_file
from os import environ
load_env(read_file('.env'))
openai.api_key = environ.get('OPENAI_API_KEY')
SHOP_API_TOKEN = environ.get('SHOP_API_TOKEN')

lets_meet_bot = 'üìå –î–∞–≤–∞–π—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ'
lets_meet_chatGPT = 'üìå –¢–µ–ø–µ—Ä—å –Ω–µ–π—Ä–æ–Ω–∫–∞ GPT —Ä–∞—Å—Å–∫–∞–∂–µ—Ç –æ —Å–µ–±–µ'
pay_text = 'ü•∏  –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–æ–∏—Å–∫–æ–º –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è –∫—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É \n\n14 –¥–Ω–µ–π –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –≤—Å–µ–≥–æ –∑–∞ 99 —Ä—É–±–ª–µ–π. –†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∏–≤–∏—Ç –∏–ª–∏ –º—ã –≤–µ—Ä–Ω–µ–º –≤–∞–º –¥–µ–Ω—å–≥–∏! \n\n–ü–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º: @ochulaevskii'
question_text =f"<b>üîç –ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –≤–æ–ø—Ä–æ—Å!</b>\n\n–ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –≤–∫–ª—é—á–∏—Ç—å –≤ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫—É.\n–ß–µ–º –¥–µ—Ç–∞–ª—å–Ω–µ–π –≤–æ–ø—Ä–æ—Å, —Ç–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–µ–π –æ—Ç–≤–µ—Ç"




async def start(message: types.Message):
    await bot.delete_message(message.from_user.id, message.message_id)  # –£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç
    await bot.send_message(message.from_user.id,
                        lets_meet_bot,
                        parse_mode='html',
                        reply_markup=kb.about_bot_line)
    work_db.insert_new_user(message.from_user.id, message.from_user.username, datetime.now().strftime("%d-%m-%Y "), 0)  # –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —ã –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö


@dp.callback_query_handler(text='/about_bot')
async def about_bot(callback: types.CallbackQuery):
    await bot.send_message(chat_id=callback.from_user.id,
                     text='–∑–¥–µ—Å—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –±–æ—Ç–µ (–∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–æ)',
                           )
    await bot.send_message(chat_id=callback.from_user.id,
                           text=lets_meet_chatGPT,
                           reply_markup=kb.about_chatGPT_line)




@dp.callback_query_handler(text='/about_chatGPT')
async def about_chatGPT(callback: types.CallbackQuery):
    msg_stiker = await bot.send_sticker(callback.from_user.id,
                                        'CAACAgIAAxkBAAEGRIFjYDB2O_zAbzSB6kCUIrfPqdk8TgACIwADKA9qFCdRJeeMIKQGKgQ')
    await bot.send_message(chat_id=callback.from_user.id,
                           text=chatGPT_response('–ß—Ç–æ —Ç–∞–∫–æ–µ chatGPT?'),)
    await bot.send_message(chat_id=callback.from_user.id,
                           text=question_text,
                           parse_mode='html')
    await msg_stiker.delete()



async def pay(message: types.Message):  # –§—É–Ω–∫—Ü–∏—è –æ–ø–ª–∞—Ç—ã –ø–ª–∞—Ç–µ–∂–∞
    await bot.send_invoice(chat_id=message.from_user.id,
                           title='–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è',
                           description=pay_text,
                           payload='14_days',
                           currency='RUB',
                           prices=[{'label': ' –†—É–±', 'amount': 9900}],
                           photo_width=1250,
                           photo_height=725,
                           photo_url='https://avatars.mds.yandex.net/get-images-cbir/6930134/zCjOsx7CdGkw7Y9WL_Lzdw118/ocr',
                           provider_token=SHOP_API_TOKEN,
    )

@dp.pre_checkout_query_handler()
async def pre_checkout(pre_checkout_query: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


async def process_pay(message: types.Message):
    if message.successful_payment.invoice_payload == '14_days':
        time_sub = int(time.time()) + int(days_to_seconds(14))
        sub_counter = work_db.get_subcribe(message.from_user.id)[0] + 1
        work_db.update_subcribe(message.from_user.id,time_sub, sub_counter)  # Update time sub after succes pay
        await bot.send_message(message.from_user.id,question_text,
                        parse_mode='html')



async def bot_answer_from_openai(message: types.Message):
    response = work_db.check_subcribe(message.from_user.id)
    if response == 1:
        msg_stiker = await bot.send_sticker(message.chat.id,
                                     'CAACAgIAAxkBAAEGRIFjYDB2O_zAbzSB6kCUIrfPqdk8TgACIwADKA9qFCdRJeeMIKQGKgQ')
        await bot.send_message(chat_id=message.from_user.id,
                               text=chatGPT_response(message.text))
        await msg_stiker.delete()
    elif response == 2:
        await start(message)
    else:
        if work_db.get_subcribe(message.from_user.id)[1] > 0:
            await bot.send_message(chat_id=message.from_user.id,
                                   text='–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å')
        else:
            await pay(message)





def register_handlers_client(dp : Dispatcher):
    dp.register_message_handler(start, commands=['start'])
    dp.register_message_handler(bot_answer_from_openai)
    dp.register_message_handler(about_chatGPT)
    dp.register_message_handler(about_bot)
    dp.register_message_handler(pre_checkout)
    dp.register_message_handler(process_pay, content_types='SUCCESSFULL_PAYMENT')






